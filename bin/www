/* eslint-disable no-process-exit */
const dotenv = require("dotenv");

dotenv.config();
const socketIo = require("socket.io");
const debug = require("debug")("socialapp:server");
const http = require("http");
const app = require("../app");

const sequelize = require("../models/index");

const server = http.createServer(app);
const io = socketIo(server);

const userSocketMap = {};
io.on("connection", (socket) => {
	console.log("A user connected");
	socket.on("userConnected", (data) => {
		userSocketMap[data.userId] = socket.id;
		io.emit("userSocketMap", userSocketMap);
	});

	socket.on("disconnect", () => {
		const userIdToRemove = Object.keys(userSocketMap).find(
			(key) => userSocketMap[key] === socket.id
		);
		if (userIdToRemove) {
			delete userSocketMap[userIdToRemove];
		}
		console.log("User disconnected");
	});
	socket.on("notification", (data) => {
		console.log(data);
		// notification to post usrs socket
		io.to(data.receiverSocketId).emit("notification", data.message);
	});
});
/**
 * Listen on provided port, on all network interfaces.
 */


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (Number.isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}
const port = normalizePort(process.env.PORT || "5002");
app.set("port", port);
/**
 * Event listener for HTTP server "error" event.
 */
sequelize
	.authenticate()
	.then(() => {
		console.log("db connected successfully");
	})
	.catch((err) => {
		console.log(`db connection problem${  err}`);
	});

// syncing all the tables
sequelize
	.sync({ alter: true })
	.then(() => {
		console.log("tables synced successfully");
	})
	.catch((err) => console.log(`error in syncing${  err}`));
server.listen(port);

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	const bind = typeof port === "string" ? `Pipe ${  port}` : `Port ${  port}`;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case "EACCES":
		console.error(`${bind  } requires elevated privileges`);
		process.exit(1);
		break;
	case "EADDRINUSE":
		console.error(`${bind  } is already in use`);
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === "string" ? `pipe ${  addr}` : `port ${  addr.port}`;
	debug(`Listening on ${  bind}`);
}
server.on("error", onError);
server.on("listening", onListening);